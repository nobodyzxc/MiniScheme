(define (cps-prim f)
 (lambda args
  (let ((r (reverse args)))
   ((car r) (apply f
             (reverse (cdr r)))))))
(define %&             (cps-prim %))
(define *&             (cps-prim *))
(define +&             (cps-prim +))
(define -&             (cps-prim -))
(define /&             (cps-prim /))
(define mod&           (cps-prim mod))
(define <&             (cps-prim <))
(define <=&            (cps-prim <=))
(define =&             (cps-prim =))
(define >&             (cps-prim >))
(define >=&            (cps-prim >=))
(define eq?&           (cps-prim eq?))
(define eqv?&          (cps-prim eqv?))
(define equal?&        (cps-prim equal?))
(define not&           (cps-prim not))
(define env?&          (cps-prim env?))
(define void?&         (cps-prim void?))
(define null?&         (cps-prim null?))
(define pair?&         (cps-prim pair?))
(define list?&         (cps-prim list?))
(define exact?&        (cps-prim exact?))
(define number?&       (cps-prim number?))
(define integer?&      (cps-prim integer?))
(define symbol?&       (cps-prim symbol?))
(define string?&       (cps-prim string?))
(define boolean?&      (cps-prim boolean?))
(define closure?&      (cps-prim closure?))
(define procedure?&    (cps-prim procedure?))
(define port?&         (cps-prim port?))
(define in-port?&      (cps-prim in-port?))
(define out-port?&     (cps-prim out-port?))
(define car&           (cps-prim car))
(define cdr&           (cps-prim cdr))
(define cons&          (cps-prim cons))
(define void&          (cps-prim void))
(define length&        (cps-prim length))
(define eval&          (cps-prim eval))
(define apply&         (cps-prim apply))
(define global&        (cps-prim global))
(define get-env&       (cps-prim get-env))
(define get-curenv&    (cps-prim get-curenv))
(define lookup-symbol& (cps-prim lookup-symbol))
(define gc&            (cps-prim gc))
(define exit&          (cps-prim exit))
(define read&          (cps-prim read))
(define source&        (cps-prim source))
(define system&        (cps-prim system))
(define display&       (cps-prim display))
(define flush-output&  (cps-prim flush-output))
(define open-in-port&  (cps-prim open-in-port))
(define open-out-port& (cps-prim open-out-port))
(define fclose&        (cps-prim fclose))
